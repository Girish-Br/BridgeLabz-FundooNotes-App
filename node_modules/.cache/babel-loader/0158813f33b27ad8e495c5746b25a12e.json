{"ast":null,"code":"import firebase from '@firebase/app';\nimport { __assign, __awaiter, __generator } from 'tslib';\nimport '@firebase/installations';\nimport { ErrorFactory } from '@firebase/util';\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar ANALYTICS_ID_FIELD = 'measurementId'; // Key to attach FID to in gtag params.\n\nvar GA_FID_KEY = 'firebase_id';\nvar ORIGIN_KEY = 'origin';\nvar GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\nvar GtagCommand;\n\n(function (GtagCommand) {\n  GtagCommand[\"EVENT\"] = \"event\";\n  GtagCommand[\"SET\"] = \"set\";\n  GtagCommand[\"CONFIG\"] = \"config\";\n})(GtagCommand || (GtagCommand = {}));\n/*\r\n * Officially recommended event names for gtag.js\r\n * Any other string is also allowed.\r\n */\n\n\nvar EventName;\n\n(function (EventName) {\n  EventName[\"ADD_PAYMENT_INFO\"] = \"add_payment_info\";\n  EventName[\"ADD_TO_CART\"] = \"add_to_cart\";\n  EventName[\"ADD_TO_WISHLIST\"] = \"add_to_wishlist\";\n  EventName[\"BEGIN_CHECKOUT\"] = \"begin_checkout\";\n  EventName[\"CHECKOUT_PROGRESS\"] = \"checkout_progress\";\n  EventName[\"EXCEPTION\"] = \"exception\";\n  EventName[\"GENERATE_LEAD\"] = \"generate_lead\";\n  EventName[\"LOGIN\"] = \"login\";\n  EventName[\"PAGE_VIEW\"] = \"page_view\";\n  EventName[\"PURCHASE\"] = \"purchase\";\n  EventName[\"REFUND\"] = \"refund\";\n  EventName[\"REMOVE_FROM_CART\"] = \"remove_from_cart\";\n  EventName[\"SCREEN_VIEW\"] = \"screen_view\";\n  EventName[\"SEARCH\"] = \"search\";\n  EventName[\"SELECT_CONTENT\"] = \"select_content\";\n  EventName[\"SET_CHECKOUT_OPTION\"] = \"set_checkout_option\";\n  EventName[\"SHARE\"] = \"share\";\n  EventName[\"SIGN_UP\"] = \"sign_up\";\n  EventName[\"TIMING_COMPLETE\"] = \"timing_complete\";\n  EventName[\"VIEW_ITEM\"] = \"view_item\";\n  EventName[\"VIEW_ITEM_LIST\"] = \"view_item_list\";\n  EventName[\"VIEW_PROMOTION\"] = \"view_promotion\";\n  EventName[\"VIEW_SEARCH_RESULTS\"] = \"view_search_results\";\n})(EventName || (EventName = {}));\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Logs an analytics event through the Firebase SDK.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\r\n * @param eventParams Analytics event parameters.\r\n */\n\n\nfunction logEvent(gtagFunction, analyticsId, eventName, eventParams, options) {\n  var params = eventParams || {};\n\n  if (!options || !options.global) {\n    params = __assign(__assign({}, eventParams), {\n      'send_to': analyticsId\n    });\n  } // Workaround for http://b/141370449 - third argument cannot be undefined.\n\n\n  gtagFunction(GtagCommand.EVENT, eventName, params || {});\n} // TODO: Brad is going to add `screen_name` to GA Gold config parameter schema\n\n/**\r\n * Set screen_name parameter for this Google Analytics ID.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param screenName Screen name string to set.\r\n */\n\n\nfunction setCurrentScreen(gtagFunction, analyticsId, screenName, options) {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, {\n      'screen_name': screenName\n    });\n  } else {\n    gtagFunction(GtagCommand.CONFIG, analyticsId, {\n      update: true,\n      'screen_name': screenName\n    });\n  }\n}\n/**\r\n * Set user_id parameter for this Google Analytics ID.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param id User ID string to set\r\n */\n\n\nfunction setUserId(gtagFunction, analyticsId, id, options) {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, {\n      'user_id': id\n    });\n  } else {\n    gtagFunction(GtagCommand.CONFIG, analyticsId, {\n      update: true,\n      'user_id': id\n    });\n  }\n}\n/**\r\n * Set all other user properties other than user_id and screen_name.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param properties Map of user properties to set\r\n */\n\n\nfunction setUserProperties(gtagFunction, analyticsId, properties, options) {\n  if (options && options.global) {\n    var flatProperties = {};\n\n    for (var _i = 0, _a = Object.keys(properties); _i < _a.length; _i++) {\n      var key = _a[_i]; // use dot notation for merge behavior in gtag.js\n\n      flatProperties[\"user_properties.\" + key] = properties[key];\n    }\n\n    gtagFunction(GtagCommand.SET, flatProperties);\n  } else {\n    gtagFunction(GtagCommand.CONFIG, analyticsId, {\n      update: true,\n      'user_properties': properties\n    });\n  }\n}\n/**\r\n * Set whether collection is enabled for this ID.\r\n *\r\n * @param enabled If true, collection is enabled for this ID.\r\n */\n\n\nfunction setAnalyticsCollectionEnabled(analyticsId, enabled) {\n  window[\"ga-disable-\" + analyticsId] = !enabled;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Initialize the analytics instance in gtag.js by calling config command with fid.\r\n *\r\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\r\n * part of the `page_view` event that's sent during the initialization\r\n * @param app Firebase app\r\n * @param gtagCore The gtag function that's not wrapped.\r\n */\n\n\nfunction initializeGAId(app, gtagCore) {\n  return __awaiter(this, void 0, void 0, function () {\n    var fid;\n\n    var _a;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , app.installations().getId()];\n\n        case 1:\n          fid = _b.sent(); // This command initializes gtag.js and only needs to be called once for the entire web app,\n          // but since it is idempotent, we can call it multiple times.\n          // We keep it together with other initialization logic for better code structure.\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n          gtagCore('js', new Date()); // It should be the first config command called on this GA-ID\n          // Initialize this GA-ID and set FID on it using the gtag config API.\n\n          gtagCore(GtagCommand.CONFIG, app.options[ANALYTICS_ID_FIELD], (_a = {}, _a[GA_FID_KEY] = fid, // guard against developers accidentally setting properties with prefix `firebase_`\n          _a[ORIGIN_KEY] = 'firebase', _a.update = true, _a));\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nfunction insertScriptTag(dataLayerName) {\n  var script = document.createElement('script'); // We are not providing an analyticsId in the URL because it would trigger a `page_view`\n  // without fid. We will initialize ga-id using gtag (config) command together with fid.\n\n  script.src = GTAG_URL + \"?l=\" + dataLayerName;\n  script.async = true;\n  document.head.appendChild(script);\n}\n/** Get reference to, or create, global datalayer.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\")\r\n */\n\n\nfunction getOrCreateDataLayer(dataLayerName) {\n  // Check for existing dataLayer and create if needed.\n  var dataLayer = [];\n\n  if (Array.isArray(window[dataLayerName])) {\n    dataLayer = window[dataLayerName];\n  } else {\n    window[dataLayerName] = dataLayer;\n  }\n\n  return dataLayer;\n}\n/**\r\n * Wraps a standard gtag function with extra code to wait for completion of\r\n * relevant initialization promises before sending requests.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer\r\n * @param initializedIdPromisesMap Map of gaIds to their initialization promises\r\n */\n\n\nfunction wrapGtag(gtagCore, initializedIdPromisesMap) {\n  return function (command, idOrNameOrParams, gtagParams) {\n    // If event, check that relevant initialization promises have completed.\n    if (command === GtagCommand.EVENT) {\n      var initializationPromisesToWaitFor = []; // If there's a 'send_to' param, check if any ID specified matches\n      // a FID we have begun a fetch on.\n\n      if (gtagParams && gtagParams['send_to']) {\n        var gaSendToList = gtagParams['send_to']; // Make it an array if is isn't, so it can be dealt with the same way.\n\n        if (!Array.isArray(gaSendToList)) {\n          gaSendToList = [gaSendToList];\n        }\n\n        for (var _i = 0, gaSendToList_1 = gaSendToList; _i < gaSendToList_1.length; _i++) {\n          var sendToId = gaSendToList_1[_i];\n          var initializationPromise = initializedIdPromisesMap[sendToId]; // Groups will not be in the map.\n\n          if (initializationPromise) {\n            initializationPromisesToWaitFor.push(initializationPromise);\n          } else {\n            // There is an item in 'send_to' that is not associated\n            // directly with an FID, possibly a group.  Empty this array\n            // and let it get populated below.\n            initializationPromisesToWaitFor = [];\n            break;\n          }\n        }\n      } // This will be unpopulated if there was no 'send_to' field , or\n      // if not all entries in the 'send_to' field could be mapped to\n      // a FID. In these cases, wait on all pending initialization promises.\n\n\n      if (initializationPromisesToWaitFor.length === 0) {\n        for (var _a = 0, _b = Object.values(initializedIdPromisesMap); _a < _b.length; _a++) {\n          var idPromise = _b[_a];\n          initializationPromisesToWaitFor.push(idPromise);\n        }\n      } // Run core gtag function with args after all relevant initialization\n      // promises have been resolved.\n\n\n      Promise.all(initializationPromisesToWaitFor) // Workaround for http://b/141370449 - third argument cannot be undefined.\n      .then(function () {\n        return gtagCore(GtagCommand.EVENT, idOrNameOrParams, gtagParams || {});\n      }).catch(function (e) {\n        return console.error(e);\n      });\n    } else if (command === GtagCommand.CONFIG) {\n      var initializationPromiseToWait = initializedIdPromisesMap[idOrNameOrParams] || Promise.resolve();\n      initializationPromiseToWait.then(function () {\n        gtagCore(GtagCommand.CONFIG, idOrNameOrParams, gtagParams);\n      }).catch(function (e) {\n        return console.error(e);\n      });\n    } else {\n      // SET command.\n      // Splitting calls for CONFIG and SET to make it clear which signature\n      // Typescript is checking.\n      gtagCore(GtagCommand.SET, idOrNameOrParams);\n    }\n  };\n}\n/**\r\n * Creates global gtag function or wraps existing one if found.\r\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\r\n * 'event' calls that belong to the GAID associated with this Firebase instance.\r\n *\r\n * @param initializedIdPromisesMap Map of gaId to initialization promises.\r\n * @param dataLayerName Name of global GA datalayer array.\r\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified)\r\n */\n\n\nfunction wrapOrCreateGtag(initializedIdPromisesMap, dataLayerName, gtagFunctionName) {\n  // Create a basic core gtag function\n  var gtagCore = function () {\n    var _args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      _args[_i] = arguments[_i];\n    } // Must push IArguments object, not an array.\n\n\n    window[dataLayerName].push(arguments);\n  }; // Replace it with existing one if found\n\n\n  if (window[gtagFunctionName] && typeof window[gtagFunctionName] === 'function') {\n    // @ts-ignore\n    gtagCore = window[gtagFunctionName];\n  }\n\n  window[gtagFunctionName] = wrapGtag(gtagCore, initializedIdPromisesMap);\n  return {\n    gtagCore: gtagCore,\n    wrappedGtag: window[gtagFunctionName]\n  };\n}\n/**\r\n * Returns first script tag in DOM matching our gtag url pattern.\r\n */\n\n\nfunction findGtagScriptOnPage() {\n  var scriptTags = window.document.getElementsByTagName('script');\n\n  for (var _i = 0, _a = Object.values(scriptTags); _i < _a.length; _i++) {\n    var tag = _a[_i];\n\n    if (tag.src && tag.src.includes(GTAG_URL)) {\n      return tag;\n    }\n  }\n\n  return null;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar _a;\n\nvar ERRORS = (_a = {}, _a[\"no-ga-id\"\n/* NO_GA_ID */\n] = \"\\\"\" + ANALYTICS_ID_FIELD + \"\\\" field is empty in \" + 'Firebase config. Firebase Analytics ' + 'requires this field to contain a valid measurement ID.', _a[\"already-exists\"\n/* ALREADY_EXISTS */\n] = 'A Firebase Analytics instance with the measurement ID ${id} ' + ' already exists. ' + 'Only one Firebase Analytics instance can be created for each measurement ID.', _a[\"already-initialized\"\n/* ALREADY_INITIALIZED */\n] = 'Firebase Analytics has already been initialized.' + 'settings() must be called before initializing any Analytics instance' + 'or it will have no effect.', _a);\nvar ERROR_FACTORY = new ErrorFactory('analytics', 'Analytics', ERRORS);\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Maps gaId to FID fetch promises.\r\n */\n\nvar initializedIdPromisesMap = {};\n/**\r\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\r\n */\n\nvar dataLayerName = 'dataLayer';\n/**\r\n * Name for window global gtag function used by GA: defaults to 'gtag'.\r\n */\n\nvar gtagName = 'gtag';\n/**\r\n * Reproduction of standard gtag function or reference to existing\r\n * gtag function on window object.\r\n */\n\nvar gtagCoreFunction;\n/**\r\n * Wrapper around gtag function that ensures FID is sent with all\r\n * relevant event and config calls.\r\n */\n\nvar wrappedGtagFunction;\n/**\r\n * Flag to ensure page initialization steps (creation or wrapping of\r\n * dataLayer and gtag script) are only run once per page load.\r\n */\n\nvar globalInitDone = false;\n/**\r\n * For testing\r\n */\n\nfunction resetGlobalVars(newGlobalInitDone, newGaInitializedPromise) {\n  if (newGlobalInitDone === void 0) {\n    newGlobalInitDone = false;\n  }\n\n  if (newGaInitializedPromise === void 0) {\n    newGaInitializedPromise = {};\n  }\n\n  globalInitDone = newGlobalInitDone;\n  initializedIdPromisesMap = newGaInitializedPromise;\n  dataLayerName = 'dataLayer';\n  gtagName = 'gtag';\n}\n/**\r\n * This must be run before calling firebase.analytics() or it won't\r\n * have any effect.\r\n * @param options Custom gtag and dataLayer names.\r\n */\n\n\nfunction settings(options) {\n  if (globalInitDone) {\n    throw ERROR_FACTORY.create(\"already-initialized\"\n    /* ALREADY_INITIALIZED */\n    );\n  }\n\n  if (options.dataLayerName) {\n    dataLayerName = options.dataLayerName;\n  }\n\n  if (options.gtagName) {\n    gtagName = options.gtagName;\n  }\n}\n\nfunction factory(app, // eslint-disable-next-line @typescript-eslint/no-explicit-any\nextendApp) {\n  var analyticsId = app.options[ANALYTICS_ID_FIELD];\n\n  if (!analyticsId) {\n    throw ERROR_FACTORY.create(\"no-ga-id\"\n    /* NO_GA_ID */\n    );\n  }\n\n  if (initializedIdPromisesMap[analyticsId] != null) {\n    throw ERROR_FACTORY.create(\"already-exists\"\n    /* ALREADY_EXISTS */\n    , {\n      id: analyticsId\n    });\n  }\n\n  if (!globalInitDone) {\n    // Steps here should only be done once per page: creation or wrapping\n    // of dataLayer and global gtag function.\n    // Detect if user has already put the gtag <script> tag on this page.\n    if (!findGtagScriptOnPage()) {\n      insertScriptTag(dataLayerName);\n    }\n\n    getOrCreateDataLayer(dataLayerName);\n\n    var _a = wrapOrCreateGtag(initializedIdPromisesMap, dataLayerName, gtagName),\n        wrappedGtag = _a.wrappedGtag,\n        gtagCore = _a.gtagCore;\n\n    wrappedGtagFunction = wrappedGtag;\n    gtagCoreFunction = gtagCore;\n    globalInitDone = true;\n  } // Async but non-blocking.\n\n\n  initializedIdPromisesMap[analyticsId] = initializeGAId(app, gtagCoreFunction);\n  var analyticsInstance = {\n    app: app,\n    logEvent: function (eventName, eventParams, options) {\n      return logEvent(wrappedGtagFunction, analyticsId, eventName, eventParams, options);\n    },\n    setCurrentScreen: function (screenName, options) {\n      return setCurrentScreen(wrappedGtagFunction, analyticsId, screenName, options);\n    },\n    setUserId: function (id, options) {\n      return setUserId(wrappedGtagFunction, analyticsId, id, options);\n    },\n    setUserProperties: function (properties, options) {\n      return setUserProperties(wrappedGtagFunction, analyticsId, properties, options);\n    },\n    setAnalyticsCollectionEnabled: function (enabled) {\n      return setAnalyticsCollectionEnabled(analyticsId, enabled);\n    }\n  };\n  extendApp({\n    INTERNAL: {\n      analytics: {\n        logEvent: analyticsInstance.logEvent\n      }\n    }\n  });\n  return analyticsInstance;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Type constant for Firebase Analytics.\r\n */\n\n\nvar ANALYTICS_TYPE = 'analytics';\n\nfunction registerAnalytics(instance) {\n  instance.INTERNAL.registerService(ANALYTICS_TYPE, factory, {\n    settings: settings,\n    EventName: EventName\n  }, // We don't need to wait on any AppHooks.\n  undefined, // Allow multiple analytics instances per app.\n  false);\n}\n\nregisterAnalytics(firebase);\nexport { factory, registerAnalytics, resetGlobalVars, settings };","map":{"version":3,"sources":["/home/admin-pc/Girish/BridgeLabz-FundooNotes-App/node_modules/@firebase/analytics/dist/index.esm.js"],"names":["firebase","__assign","__awaiter","__generator","ErrorFactory","ANALYTICS_ID_FIELD","GA_FID_KEY","ORIGIN_KEY","GTAG_URL","GtagCommand","EventName","logEvent","gtagFunction","analyticsId","eventName","eventParams","options","params","global","EVENT","setCurrentScreen","screenName","SET","CONFIG","update","setUserId","id","setUserProperties","properties","flatProperties","_i","_a","Object","keys","length","key","setAnalyticsCollectionEnabled","enabled","window","initializeGAId","app","gtagCore","fid","_b","label","installations","getId","sent","Date","insertScriptTag","dataLayerName","script","document","createElement","src","async","head","appendChild","getOrCreateDataLayer","dataLayer","Array","isArray","wrapGtag","initializedIdPromisesMap","command","idOrNameOrParams","gtagParams","initializationPromisesToWaitFor","gaSendToList","gaSendToList_1","sendToId","initializationPromise","push","values","idPromise","Promise","all","then","catch","e","console","error","initializationPromiseToWait","resolve","wrapOrCreateGtag","gtagFunctionName","_args","arguments","wrappedGtag","findGtagScriptOnPage","scriptTags","getElementsByTagName","tag","includes","ERRORS","ERROR_FACTORY","gtagName","gtagCoreFunction","wrappedGtagFunction","globalInitDone","resetGlobalVars","newGlobalInitDone","newGaInitializedPromise","settings","create","factory","extendApp","analyticsInstance","INTERNAL","analytics","ANALYTICS_TYPE","registerAnalytics","instance","registerService","undefined"],"mappings":"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","sourcesContent":["import firebase from '@firebase/app';\nimport { __assign, __awaiter, __generator } from 'tslib';\nimport '@firebase/installations';\nimport { ErrorFactory } from '@firebase/util';\n\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar ANALYTICS_ID_FIELD = 'measurementId';\r\n// Key to attach FID to in gtag params.\r\nvar GA_FID_KEY = 'firebase_id';\r\nvar ORIGIN_KEY = 'origin';\r\nvar GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\r\nvar GtagCommand;\r\n(function (GtagCommand) {\r\n    GtagCommand[\"EVENT\"] = \"event\";\r\n    GtagCommand[\"SET\"] = \"set\";\r\n    GtagCommand[\"CONFIG\"] = \"config\";\r\n})(GtagCommand || (GtagCommand = {}));\r\n/*\r\n * Officially recommended event names for gtag.js\r\n * Any other string is also allowed.\r\n */\r\nvar EventName;\r\n(function (EventName) {\r\n    EventName[\"ADD_PAYMENT_INFO\"] = \"add_payment_info\";\r\n    EventName[\"ADD_TO_CART\"] = \"add_to_cart\";\r\n    EventName[\"ADD_TO_WISHLIST\"] = \"add_to_wishlist\";\r\n    EventName[\"BEGIN_CHECKOUT\"] = \"begin_checkout\";\r\n    EventName[\"CHECKOUT_PROGRESS\"] = \"checkout_progress\";\r\n    EventName[\"EXCEPTION\"] = \"exception\";\r\n    EventName[\"GENERATE_LEAD\"] = \"generate_lead\";\r\n    EventName[\"LOGIN\"] = \"login\";\r\n    EventName[\"PAGE_VIEW\"] = \"page_view\";\r\n    EventName[\"PURCHASE\"] = \"purchase\";\r\n    EventName[\"REFUND\"] = \"refund\";\r\n    EventName[\"REMOVE_FROM_CART\"] = \"remove_from_cart\";\r\n    EventName[\"SCREEN_VIEW\"] = \"screen_view\";\r\n    EventName[\"SEARCH\"] = \"search\";\r\n    EventName[\"SELECT_CONTENT\"] = \"select_content\";\r\n    EventName[\"SET_CHECKOUT_OPTION\"] = \"set_checkout_option\";\r\n    EventName[\"SHARE\"] = \"share\";\r\n    EventName[\"SIGN_UP\"] = \"sign_up\";\r\n    EventName[\"TIMING_COMPLETE\"] = \"timing_complete\";\r\n    EventName[\"VIEW_ITEM\"] = \"view_item\";\r\n    EventName[\"VIEW_ITEM_LIST\"] = \"view_item_list\";\r\n    EventName[\"VIEW_PROMOTION\"] = \"view_promotion\";\r\n    EventName[\"VIEW_SEARCH_RESULTS\"] = \"view_search_results\";\r\n})(EventName || (EventName = {}));\n\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Logs an analytics event through the Firebase SDK.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\r\n * @param eventParams Analytics event parameters.\r\n */\r\nfunction logEvent(gtagFunction, analyticsId, eventName, eventParams, options) {\r\n    var params = eventParams || {};\r\n    if (!options || !options.global) {\r\n        params = __assign(__assign({}, eventParams), { 'send_to': analyticsId });\r\n    }\r\n    // Workaround for http://b/141370449 - third argument cannot be undefined.\r\n    gtagFunction(GtagCommand.EVENT, eventName, params || {});\r\n}\r\n// TODO: Brad is going to add `screen_name` to GA Gold config parameter schema\r\n/**\r\n * Set screen_name parameter for this Google Analytics ID.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param screenName Screen name string to set.\r\n */\r\nfunction setCurrentScreen(gtagFunction, analyticsId, screenName, options) {\r\n    if (options && options.global) {\r\n        gtagFunction(GtagCommand.SET, { 'screen_name': screenName });\r\n    }\r\n    else {\r\n        gtagFunction(GtagCommand.CONFIG, analyticsId, {\r\n            update: true,\r\n            'screen_name': screenName\r\n        });\r\n    }\r\n}\r\n/**\r\n * Set user_id parameter for this Google Analytics ID.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param id User ID string to set\r\n */\r\nfunction setUserId(gtagFunction, analyticsId, id, options) {\r\n    if (options && options.global) {\r\n        gtagFunction(GtagCommand.SET, { 'user_id': id });\r\n    }\r\n    else {\r\n        gtagFunction(GtagCommand.CONFIG, analyticsId, {\r\n            update: true,\r\n            'user_id': id\r\n        });\r\n    }\r\n}\r\n/**\r\n * Set all other user properties other than user_id and screen_name.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param properties Map of user properties to set\r\n */\r\nfunction setUserProperties(gtagFunction, analyticsId, properties, options) {\r\n    if (options && options.global) {\r\n        var flatProperties = {};\r\n        for (var _i = 0, _a = Object.keys(properties); _i < _a.length; _i++) {\r\n            var key = _a[_i];\r\n            // use dot notation for merge behavior in gtag.js\r\n            flatProperties[\"user_properties.\" + key] = properties[key];\r\n        }\r\n        gtagFunction(GtagCommand.SET, flatProperties);\r\n    }\r\n    else {\r\n        gtagFunction(GtagCommand.CONFIG, analyticsId, {\r\n            update: true,\r\n            'user_properties': properties\r\n        });\r\n    }\r\n}\r\n/**\r\n * Set whether collection is enabled for this ID.\r\n *\r\n * @param enabled If true, collection is enabled for this ID.\r\n */\r\nfunction setAnalyticsCollectionEnabled(analyticsId, enabled) {\r\n    window[\"ga-disable-\" + analyticsId] = !enabled;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Initialize the analytics instance in gtag.js by calling config command with fid.\r\n *\r\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\r\n * part of the `page_view` event that's sent during the initialization\r\n * @param app Firebase app\r\n * @param gtagCore The gtag function that's not wrapped.\r\n */\r\nfunction initializeGAId(app, gtagCore) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var fid;\r\n        var _a;\r\n        return __generator(this, function (_b) {\r\n            switch (_b.label) {\r\n                case 0: return [4 /*yield*/, app.installations().getId()];\r\n                case 1:\r\n                    fid = _b.sent();\r\n                    // This command initializes gtag.js and only needs to be called once for the entire web app,\r\n                    // but since it is idempotent, we can call it multiple times.\r\n                    // We keep it together with other initialization logic for better code structure.\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    gtagCore('js', new Date());\r\n                    // It should be the first config command called on this GA-ID\r\n                    // Initialize this GA-ID and set FID on it using the gtag config API.\r\n                    gtagCore(GtagCommand.CONFIG, app.options[ANALYTICS_ID_FIELD], (_a = {},\r\n                        _a[GA_FID_KEY] = fid,\r\n                        // guard against developers accidentally setting properties with prefix `firebase_`\r\n                        _a[ORIGIN_KEY] = 'firebase',\r\n                        _a.update = true,\r\n                        _a));\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction insertScriptTag(dataLayerName) {\r\n    var script = document.createElement('script');\r\n    // We are not providing an analyticsId in the URL because it would trigger a `page_view`\r\n    // without fid. We will initialize ga-id using gtag (config) command together with fid.\r\n    script.src = GTAG_URL + \"?l=\" + dataLayerName;\r\n    script.async = true;\r\n    document.head.appendChild(script);\r\n}\r\n/** Get reference to, or create, global datalayer.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\")\r\n */\r\nfunction getOrCreateDataLayer(dataLayerName) {\r\n    // Check for existing dataLayer and create if needed.\r\n    var dataLayer = [];\r\n    if (Array.isArray(window[dataLayerName])) {\r\n        dataLayer = window[dataLayerName];\r\n    }\r\n    else {\r\n        window[dataLayerName] = dataLayer;\r\n    }\r\n    return dataLayer;\r\n}\r\n/**\r\n * Wraps a standard gtag function with extra code to wait for completion of\r\n * relevant initialization promises before sending requests.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer\r\n * @param initializedIdPromisesMap Map of gaIds to their initialization promises\r\n */\r\nfunction wrapGtag(gtagCore, initializedIdPromisesMap) {\r\n    return function (command, idOrNameOrParams, gtagParams) {\r\n        // If event, check that relevant initialization promises have completed.\r\n        if (command === GtagCommand.EVENT) {\r\n            var initializationPromisesToWaitFor = [];\r\n            // If there's a 'send_to' param, check if any ID specified matches\r\n            // a FID we have begun a fetch on.\r\n            if (gtagParams && gtagParams['send_to']) {\r\n                var gaSendToList = gtagParams['send_to'];\r\n                // Make it an array if is isn't, so it can be dealt with the same way.\r\n                if (!Array.isArray(gaSendToList)) {\r\n                    gaSendToList = [gaSendToList];\r\n                }\r\n                for (var _i = 0, gaSendToList_1 = gaSendToList; _i < gaSendToList_1.length; _i++) {\r\n                    var sendToId = gaSendToList_1[_i];\r\n                    var initializationPromise = initializedIdPromisesMap[sendToId];\r\n                    // Groups will not be in the map.\r\n                    if (initializationPromise) {\r\n                        initializationPromisesToWaitFor.push(initializationPromise);\r\n                    }\r\n                    else {\r\n                        // There is an item in 'send_to' that is not associated\r\n                        // directly with an FID, possibly a group.  Empty this array\r\n                        // and let it get populated below.\r\n                        initializationPromisesToWaitFor = [];\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            // This will be unpopulated if there was no 'send_to' field , or\r\n            // if not all entries in the 'send_to' field could be mapped to\r\n            // a FID. In these cases, wait on all pending initialization promises.\r\n            if (initializationPromisesToWaitFor.length === 0) {\r\n                for (var _a = 0, _b = Object.values(initializedIdPromisesMap); _a < _b.length; _a++) {\r\n                    var idPromise = _b[_a];\r\n                    initializationPromisesToWaitFor.push(idPromise);\r\n                }\r\n            }\r\n            // Run core gtag function with args after all relevant initialization\r\n            // promises have been resolved.\r\n            Promise.all(initializationPromisesToWaitFor)\r\n                // Workaround for http://b/141370449 - third argument cannot be undefined.\r\n                .then(function () {\r\n                return gtagCore(GtagCommand.EVENT, idOrNameOrParams, gtagParams || {});\r\n            })\r\n                .catch(function (e) { return console.error(e); });\r\n        }\r\n        else if (command === GtagCommand.CONFIG) {\r\n            var initializationPromiseToWait = initializedIdPromisesMap[idOrNameOrParams] ||\r\n                Promise.resolve();\r\n            initializationPromiseToWait\r\n                .then(function () {\r\n                gtagCore(GtagCommand.CONFIG, idOrNameOrParams, gtagParams);\r\n            })\r\n                .catch(function (e) { return console.error(e); });\r\n        }\r\n        else {\r\n            // SET command.\r\n            // Splitting calls for CONFIG and SET to make it clear which signature\r\n            // Typescript is checking.\r\n            gtagCore(GtagCommand.SET, idOrNameOrParams);\r\n        }\r\n    };\r\n}\r\n/**\r\n * Creates global gtag function or wraps existing one if found.\r\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\r\n * 'event' calls that belong to the GAID associated with this Firebase instance.\r\n *\r\n * @param initializedIdPromisesMap Map of gaId to initialization promises.\r\n * @param dataLayerName Name of global GA datalayer array.\r\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified)\r\n */\r\nfunction wrapOrCreateGtag(initializedIdPromisesMap, dataLayerName, gtagFunctionName) {\r\n    // Create a basic core gtag function\r\n    var gtagCore = function () {\r\n        var _args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            _args[_i] = arguments[_i];\r\n        }\r\n        // Must push IArguments object, not an array.\r\n        window[dataLayerName].push(arguments);\r\n    };\r\n    // Replace it with existing one if found\r\n    if (window[gtagFunctionName] &&\r\n        typeof window[gtagFunctionName] === 'function') {\r\n        // @ts-ignore\r\n        gtagCore = window[gtagFunctionName];\r\n    }\r\n    window[gtagFunctionName] = wrapGtag(gtagCore, initializedIdPromisesMap);\r\n    return {\r\n        gtagCore: gtagCore,\r\n        wrappedGtag: window[gtagFunctionName]\r\n    };\r\n}\r\n/**\r\n * Returns first script tag in DOM matching our gtag url pattern.\r\n */\r\nfunction findGtagScriptOnPage() {\r\n    var scriptTags = window.document.getElementsByTagName('script');\r\n    for (var _i = 0, _a = Object.values(scriptTags); _i < _a.length; _i++) {\r\n        var tag = _a[_i];\r\n        if (tag.src && tag.src.includes(GTAG_URL)) {\r\n            return tag;\r\n        }\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar _a;\r\nvar ERRORS = (_a = {},\r\n    _a[\"no-ga-id\" /* NO_GA_ID */] = \"\\\"\" + ANALYTICS_ID_FIELD + \"\\\" field is empty in \" +\r\n        'Firebase config. Firebase Analytics ' +\r\n        'requires this field to contain a valid measurement ID.',\r\n    _a[\"already-exists\" /* ALREADY_EXISTS */] = 'A Firebase Analytics instance with the measurement ID ${id} ' +\r\n        ' already exists. ' +\r\n        'Only one Firebase Analytics instance can be created for each measurement ID.',\r\n    _a[\"already-initialized\" /* ALREADY_INITIALIZED */] = 'Firebase Analytics has already been initialized.' +\r\n        'settings() must be called before initializing any Analytics instance' +\r\n        'or it will have no effect.',\r\n    _a);\r\nvar ERROR_FACTORY = new ErrorFactory('analytics', 'Analytics', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Maps gaId to FID fetch promises.\r\n */\r\nvar initializedIdPromisesMap = {};\r\n/**\r\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\r\n */\r\nvar dataLayerName = 'dataLayer';\r\n/**\r\n * Name for window global gtag function used by GA: defaults to 'gtag'.\r\n */\r\nvar gtagName = 'gtag';\r\n/**\r\n * Reproduction of standard gtag function or reference to existing\r\n * gtag function on window object.\r\n */\r\nvar gtagCoreFunction;\r\n/**\r\n * Wrapper around gtag function that ensures FID is sent with all\r\n * relevant event and config calls.\r\n */\r\nvar wrappedGtagFunction;\r\n/**\r\n * Flag to ensure page initialization steps (creation or wrapping of\r\n * dataLayer and gtag script) are only run once per page load.\r\n */\r\nvar globalInitDone = false;\r\n/**\r\n * For testing\r\n */\r\nfunction resetGlobalVars(newGlobalInitDone, newGaInitializedPromise) {\r\n    if (newGlobalInitDone === void 0) { newGlobalInitDone = false; }\r\n    if (newGaInitializedPromise === void 0) { newGaInitializedPromise = {}; }\r\n    globalInitDone = newGlobalInitDone;\r\n    initializedIdPromisesMap = newGaInitializedPromise;\r\n    dataLayerName = 'dataLayer';\r\n    gtagName = 'gtag';\r\n}\r\n/**\r\n * This must be run before calling firebase.analytics() or it won't\r\n * have any effect.\r\n * @param options Custom gtag and dataLayer names.\r\n */\r\nfunction settings(options) {\r\n    if (globalInitDone) {\r\n        throw ERROR_FACTORY.create(\"already-initialized\" /* ALREADY_INITIALIZED */);\r\n    }\r\n    if (options.dataLayerName) {\r\n        dataLayerName = options.dataLayerName;\r\n    }\r\n    if (options.gtagName) {\r\n        gtagName = options.gtagName;\r\n    }\r\n}\r\nfunction factory(app, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nextendApp) {\r\n    var analyticsId = app.options[ANALYTICS_ID_FIELD];\r\n    if (!analyticsId) {\r\n        throw ERROR_FACTORY.create(\"no-ga-id\" /* NO_GA_ID */);\r\n    }\r\n    if (initializedIdPromisesMap[analyticsId] != null) {\r\n        throw ERROR_FACTORY.create(\"already-exists\" /* ALREADY_EXISTS */, {\r\n            id: analyticsId\r\n        });\r\n    }\r\n    if (!globalInitDone) {\r\n        // Steps here should only be done once per page: creation or wrapping\r\n        // of dataLayer and global gtag function.\r\n        // Detect if user has already put the gtag <script> tag on this page.\r\n        if (!findGtagScriptOnPage()) {\r\n            insertScriptTag(dataLayerName);\r\n        }\r\n        getOrCreateDataLayer(dataLayerName);\r\n        var _a = wrapOrCreateGtag(initializedIdPromisesMap, dataLayerName, gtagName), wrappedGtag = _a.wrappedGtag, gtagCore = _a.gtagCore;\r\n        wrappedGtagFunction = wrappedGtag;\r\n        gtagCoreFunction = gtagCore;\r\n        globalInitDone = true;\r\n    }\r\n    // Async but non-blocking.\r\n    initializedIdPromisesMap[analyticsId] = initializeGAId(app, gtagCoreFunction);\r\n    var analyticsInstance = {\r\n        app: app,\r\n        logEvent: function (eventName, eventParams, options) {\r\n            return logEvent(wrappedGtagFunction, analyticsId, eventName, eventParams, options);\r\n        },\r\n        setCurrentScreen: function (screenName, options) {\r\n            return setCurrentScreen(wrappedGtagFunction, analyticsId, screenName, options);\r\n        },\r\n        setUserId: function (id, options) {\r\n            return setUserId(wrappedGtagFunction, analyticsId, id, options);\r\n        },\r\n        setUserProperties: function (properties, options) {\r\n            return setUserProperties(wrappedGtagFunction, analyticsId, properties, options);\r\n        },\r\n        setAnalyticsCollectionEnabled: function (enabled) {\r\n            return setAnalyticsCollectionEnabled(analyticsId, enabled);\r\n        }\r\n    };\r\n    extendApp({\r\n        INTERNAL: {\r\n            analytics: {\r\n                logEvent: analyticsInstance.logEvent\r\n            }\r\n        }\r\n    });\r\n    return analyticsInstance;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Type constant for Firebase Analytics.\r\n */\r\nvar ANALYTICS_TYPE = 'analytics';\r\nfunction registerAnalytics(instance) {\r\n    instance.INTERNAL.registerService(ANALYTICS_TYPE, factory, {\r\n        settings: settings,\r\n        EventName: EventName\r\n    }, \r\n    // We don't need to wait on any AppHooks.\r\n    undefined, \r\n    // Allow multiple analytics instances per app.\r\n    false);\r\n}\r\nregisterAnalytics(firebase);\n\nexport { factory, registerAnalytics, resetGlobalVars, settings };\n//# sourceMappingURL=index.esm.js.map\n"]},"metadata":{},"sourceType":"module"}